{"version":3,"file":"main.js","sources":["../../frontend/ts/animations.ts","../../frontend/ts/darkmode.ts","../../frontend/ts/searchbar.ts"],"sourcesContent":["const animations: NodeListOf<HTMLElement> = document.querySelectorAll('.__animateleft, .__animateright, .__animateup');\r\nconst animateDown: NodeListOf<HTMLElement> = document.querySelectorAll('.__animatedown'); // animateDown is handled separately as it requires a higher threshold\r\n\r\nconst setObserver = (elements: NodeListOf<Element> | HTMLElement[], offset: number): void => {\r\n    const options: IntersectionObserverInit = {\r\n        root: null,\r\n        rootMargin: `${offset}px`,\r\n        threshold: 0,\r\n    };\r\n\r\n    const callback: IntersectionObserverCallback = (entries, observer) => {\r\n        entries.forEach(entry => {\r\n            if (entry.isIntersecting) {\r\n                const targetElement = entry.target as HTMLElement; // Type-cast to HTMLElement\r\n                targetElement.classList.add('__animate');\r\n                observer.unobserve(targetElement);\r\n            }\r\n        });\r\n    };\r\n\r\n    const animationObserver = new IntersectionObserver(callback, options);\r\n\r\n    elements.forEach(e => {\r\n        animationObserver.observe(e);\r\n    });\r\n};\r\n\r\n// Set observers directly\r\nsetObserver(animations, 0);\r\nsetObserver(animateDown, 100);\r\n","const body: HTMLBodyElement = document.body as HTMLBodyElement;\r\nconst darkModeBtn: HTMLButtonElement = document.querySelector('.darkmodeToggle') as HTMLButtonElement;\r\nconst darkModeBtnText: HTMLSpanElement = darkModeBtn.querySelector('.button-text') as HTMLSpanElement;\r\n\r\nconst toggleDarkMode = () : void => {\r\n\r\n    body.classList.toggle('dark-mode');\r\n    darkModeBtn.classList.toggle('__active');\r\n\r\n    if (body.classList.contains('dark-mode')) {\r\n        localStorage.setItem('theme', 'dark');\r\n\r\n        darkModeBtnText.innerText = \"Switch to light mode\"\r\n        return;\r\n    }\r\n    \r\n    localStorage.setItem('theme', 'light');\r\n    darkModeBtnText.innerText = \"Switch to dark mode\"\r\n}\r\n\r\ndarkModeBtn.addEventListener('click', toggleDarkMode);\r\n\r\nwindow.onload = () : void => {\r\n    const theme = localStorage.getItem('theme');\r\n\r\n    if (theme === 'dark') {\r\n        body.classList.add('dark-mode');\r\n        darkModeBtn.classList.add('__active');\r\n        darkModeBtnText.innerText = \"Switch to light mode\"\r\n    }\r\n}","const searchBar: HTMLDivElement = document.querySelector('.searchbar') as HTMLDivElement;\r\nconst searchBarForm: HTMLFormElement = document.querySelector('.searchbar-form') as HTMLFormElement;\r\nconst searchBarToggle: HTMLButtonElement = document.querySelector('.searchbarToggle') as HTMLButtonElement;\r\nconst searchBarInput: HTMLInputElement = document.querySelector('.searchbar-form > input') as HTMLInputElement;\r\nconst searchBarSubmit: HTMLButtonElement = document.querySelector('.searchbar-form > .searchbar-button') as HTMLButtonElement;\r\n\r\nconst closeSearch: () => void = () => {\r\n    searchBar.classList.remove('__active');\r\n    searchBarInput.value = \"\";\r\n    searchBarForm.setAttribute('aria-hidden', 'true');\r\n    searchBarInput.setAttribute('tabindex', '-1');\r\n    searchBarSubmit.setAttribute('tabindex', '-1');\r\n    searchBarToggle.focus();\r\n}\r\n\r\nconst openSearch: () => void = () => {\r\n    searchBar.classList.add('__active');\r\n    searchBarForm.setAttribute('aria-hidden', 'false');\r\n    searchBarInput.setAttribute('tabindex', '0');\r\n    searchBarSubmit.setAttribute('tabindex', '0');\r\n    searchBarInput.focus();\r\n}\r\n\r\nconst toggleSearch: () => void = () => {\r\n    if (searchBar.classList.contains('__active')) {\r\n       closeSearch();\r\n    } else {\r\n        openSearch();\r\n    }\r\n}\r\n\r\nsearchBarToggle.addEventListener('click', toggleSearch);\r\ndocument.body.addEventListener('keyup', (e: KeyboardEvent) => {\r\n    if (e.key == \"Escape\") {\r\n        if (searchBar.classList.contains('__active')) {\r\n            closeSearch();\r\n        }\r\n    }\r\n});"],"names":["animations","animateDown","setObserver","elements","offset","options","callback","entries","observer","entry","targetElement","animationObserver","e","body","darkModeBtn","darkModeBtnText","toggleDarkMode","searchBar","searchBarForm","searchBarToggle","searchBarInput","searchBarSubmit","closeSearch","openSearch","toggleSearch"],"mappings":"AAAA,MAAMA,EAAsC,SAAS,iBAAiB,+CAA+C,EAC/GC,EAAuC,SAAS,iBAAiB,gBAAgB,EAEjFC,EAAc,CAACC,EAA+CC,IAAyB,CACzF,MAAMC,EAAoC,CACtC,KAAM,KACN,WAAY,GAAGD,CAAM,KACrB,UAAW,CAAA,EAGTE,EAAyC,CAACC,EAASC,IAAa,CAClED,EAAQ,QAAiBE,GAAA,CACrB,GAAIA,EAAM,eAAgB,CACtB,MAAMC,EAAgBD,EAAM,OACdC,EAAA,UAAU,IAAI,WAAW,EACvCF,EAAS,UAAUE,CAAa,CACpC,CAAA,CACH,CAAA,EAGCC,EAAoB,IAAI,qBAAqBL,EAAUD,CAAO,EAEpEF,EAAS,QAAaS,GAAA,CAClBD,EAAkB,QAAQC,CAAC,CAAA,CAC9B,CACL,EAGAV,EAAYF,EAAY,CAAC,EACzBE,EAAYD,EAAa,GAAG,EC7B5B,MAAMY,EAAwB,SAAS,KACjCC,EAAiC,SAAS,cAAc,iBAAiB,EACzEC,EAAmCD,EAAY,cAAc,cAAc,EAE3EE,EAAiB,IAAa,CAKhC,GAHKH,EAAA,UAAU,OAAO,WAAW,EACrBC,EAAA,UAAU,OAAO,UAAU,EAEnCD,EAAK,UAAU,SAAS,WAAW,EAAG,CACzB,aAAA,QAAQ,QAAS,MAAM,EAEpCE,EAAgB,UAAY,uBAC5B,MACJ,CAEa,aAAA,QAAQ,QAAS,OAAO,EACrCA,EAAgB,UAAY,qBAChC,EAEAD,EAAY,iBAAiB,QAASE,CAAc,EAEpD,OAAO,OAAS,IAAa,CACX,aAAa,QAAQ,OAAO,IAE5B,SACLH,EAAA,UAAU,IAAI,WAAW,EAClBC,EAAA,UAAU,IAAI,UAAU,EACpCC,EAAgB,UAAY,uBAEpC,EC9BA,MAAME,EAA4B,SAAS,cAAc,YAAY,EAC/DC,EAAiC,SAAS,cAAc,iBAAiB,EACzEC,EAAqC,SAAS,cAAc,kBAAkB,EAC9EC,EAAmC,SAAS,cAAc,yBAAyB,EACnFC,EAAqC,SAAS,cAAc,qCAAqC,EAEjGC,EAA0B,IAAM,CACxBL,EAAA,UAAU,OAAO,UAAU,EACrCG,EAAe,MAAQ,GACTF,EAAA,aAAa,cAAe,MAAM,EACjCE,EAAA,aAAa,WAAY,IAAI,EAC5BC,EAAA,aAAa,WAAY,IAAI,EAC7CF,EAAgB,MAAM,CAC1B,EAEMI,EAAyB,IAAM,CACvBN,EAAA,UAAU,IAAI,UAAU,EACpBC,EAAA,aAAa,cAAe,OAAO,EAClCE,EAAA,aAAa,WAAY,GAAG,EAC3BC,EAAA,aAAa,WAAY,GAAG,EAC5CD,EAAe,MAAM,CACzB,EAEMI,EAA2B,IAAM,CAC/BP,EAAU,UAAU,SAAS,UAAU,EAC5BK,IAEAC,GAEnB,EAEAJ,EAAgB,iBAAiB,QAASK,CAAY,EACtD,SAAS,KAAK,iBAAiB,QAAU,GAAqB,CACtD,EAAE,KAAO,UACLP,EAAU,UAAU,SAAS,UAAU,GAC3BK,GAGxB,CAAC"}