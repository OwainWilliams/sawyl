{"version":3,"file":"main.js","sources":["../../frontend/ts/animations.ts","../../frontend/ts/darkmode.ts"],"sourcesContent":["const animations: NodeListOf<HTMLElement> = document.querySelectorAll('.__animateleft, .__animateright, .__animateup');\r\nconst animateDown: NodeListOf<HTMLElement> = document.querySelectorAll('.__animatedown'); // animateDown is handled separately as it requires a higher threshold\r\n\r\nconst setObserver = (elements: NodeListOf<Element> | HTMLElement[], offset: number): void => {\r\n    const options: IntersectionObserverInit = {\r\n        root: null,\r\n        rootMargin: `${offset}px`,\r\n        threshold: 0,\r\n    };\r\n\r\n    const callback: IntersectionObserverCallback = (entries, observer) => {\r\n        entries.forEach(entry => {\r\n            if (entry.isIntersecting) {\r\n                const targetElement = entry.target as HTMLElement; // Type-cast to HTMLElement\r\n                targetElement.classList.add('__animate');\r\n                observer.unobserve(targetElement);\r\n            }\r\n        });\r\n    };\r\n\r\n    const animationObserver = new IntersectionObserver(callback, options);\r\n\r\n    elements.forEach(e => {\r\n        animationObserver.observe(e);\r\n    });\r\n};\r\n\r\n// Set observers directly\r\nsetObserver(animations, 0);\r\nsetObserver(animateDown, 100);\r\n","const darkModeBtn: HTMLButtonElement = document.querySelector('.darkmodeToggle') as HTMLButtonElement;\r\nconst body: HTMLBodyElement = document.body as HTMLBodyElement;\r\n\r\nconst toggleDarkMode = () : void => {\r\n\r\n    body.classList.toggle('dark-mode');\r\n    darkModeBtn.classList.toggle('__active');\r\n\r\n    if (body.classList.contains('dark-mode')) {\r\n        localStorage.setItem('theme', 'dark');\r\n        return;\r\n    }\r\n\r\n    localStorage.setItem('theme', 'light');\r\n}\r\n\r\ndarkModeBtn.addEventListener('click', toggleDarkMode);\r\n\r\nwindow.onload = () : void => {\r\n    const theme = localStorage.getItem('theme');\r\n\r\n    if (theme === 'dark') {\r\n        body.classList.add('dark-mode');\r\n        darkModeBtn.classList.add('__active');\r\n    }\r\n}"],"names":["animations","animateDown","setObserver","elements","offset","options","callback","entries","observer","entry","targetElement","animationObserver","darkModeBtn","body","toggleDarkMode"],"mappings":"AAAA,MAAMA,EAAsC,SAAS,iBAAiB,+CAA+C,EAC/GC,EAAuC,SAAS,iBAAiB,gBAAgB,EAEjFC,EAAc,CAACC,EAA+CC,IAAyB,CACzF,MAAMC,EAAoC,CACtC,KAAM,KACN,WAAY,GAAGD,CAAM,KACrB,UAAW,CAAA,EAGTE,EAAyC,CAACC,EAASC,IAAa,CAClED,EAAQ,QAAiBE,GAAA,CACrB,GAAIA,EAAM,eAAgB,CACtB,MAAMC,EAAgBD,EAAM,OACdC,EAAA,UAAU,IAAI,WAAW,EACvCF,EAAS,UAAUE,CAAa,CACpC,CAAA,CACH,CAAA,EAGCC,EAAoB,IAAI,qBAAqBL,EAAUD,CAAO,EAEpEF,EAAS,QAAa,GAAA,CAClBQ,EAAkB,QAAQ,CAAC,CAAA,CAC9B,CACL,EAGAT,EAAYF,EAAY,CAAC,EACzBE,EAAYD,EAAa,GAAG,EC7B5B,MAAMW,EAAiC,SAAS,cAAc,iBAAiB,EACzEC,EAAwB,SAAS,KAEjCC,EAAiB,IAAa,CAKhC,GAHKD,EAAA,UAAU,OAAO,WAAW,EACrBD,EAAA,UAAU,OAAO,UAAU,EAEnCC,EAAK,UAAU,SAAS,WAAW,EAAG,CACzB,aAAA,QAAQ,QAAS,MAAM,EACpC,MACJ,CAEa,aAAA,QAAQ,QAAS,OAAO,CACzC,EAEAD,EAAY,iBAAiB,QAASE,CAAc,EAEpD,OAAO,OAAS,IAAa,CACX,aAAa,QAAQ,OAAO,IAE5B,SACLD,EAAA,UAAU,IAAI,WAAW,EAClBD,EAAA,UAAU,IAAI,UAAU,EAE5C"}